<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Java Concurrency in Practice on Hugo ʕ•ᴥ•ʔ Bear Blog</title>
    <link>http://localhost:1313/my_site/blog/dev_foundation/concurrency/java_concurrency_in_practice_brian_goetz/</link>
    <description>Recent content in Java Concurrency in Practice on Hugo ʕ•ᴥ•ʔ Bear Blog</description>
    <generator>Hugo</generator>
    <language>en-US</language>
    <copyright>Copyright © 2020, Jane Doe.</copyright>
    <lastBuildDate>Wed, 30 Apr 2025 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/my_site/blog/dev_foundation/concurrency/java_concurrency_in_practice_brian_goetz/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>9. Explicit lock</title>
      <link>http://localhost:1313/my_site/9.-explicit-lock/</link>
      <pubDate>Wed, 30 Apr 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/my_site/9.-explicit-lock/</guid>
      <description>&lt;h1 id=&#34;1-lock-and-reentrantlock&#34;&gt;1. Lock and Reentrantlock.&lt;/h1&gt;&#xA;&lt;p&gt;&lt;code&gt;ReentrantLock&lt;/code&gt; allows you put timeout on lock acquisition, offering greater thread liveness.&lt;/p&gt;&#xA;&lt;p&gt;It also offers more flexible locking mechanism, where you can expand lock section across methods.&lt;/p&gt;&#xA;&lt;p&gt;Following is the code example:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&#xA;&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;&#xA;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1&#xA;&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2&#xA;&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3&#xA;&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4&#xA;&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;5&#xA;&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;6&#xA;&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;7&#xA;&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;8&#xA;&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;9&#xA;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&#xA;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;&#xA;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Lock lock &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; ReentrantLock();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;...&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;lock.&lt;span style=&#34;color:#a6e22e&#34;&gt;lock&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// update object state&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// catch exceptions and restore invariants if necessary&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;} &lt;span style=&#34;color:#66d9ef&#34;&gt;finally&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    lock.&lt;span style=&#34;color:#a6e22e&#34;&gt;unlock&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&lt;p&gt;You would need to lock and unlock when you enter and exit the race condition code. Users of this lock&#xA;must be wary about &lt;code&gt;unlock()&lt;/code&gt; calls, because minor mistakes can cause code path never call &lt;code&gt;unlock()&lt;/code&gt;,&#xA;leaving the system hanging.&lt;/p&gt;</description>
    </item>
    <item>
      <title>8. Avoid liveness hazard</title>
      <link>http://localhost:1313/my_site/8.-avoid-liveness-hazard/</link>
      <pubDate>Tue, 29 Apr 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/my_site/8.-avoid-liveness-hazard/</guid>
      <description>&lt;h1 id=&#34;1-deadlock&#34;&gt;1. Deadlock&lt;/h1&gt;&#xA;&lt;p&gt;Deadlock can happen when threads get to wait resources held by each other. For example, in &lt;em&gt;dining philosophers&lt;/em&gt; problem, deadlock can occur&#xA;when all philosophers simultaneously pick their left chopstick and wait the right stick held by the philosopher right next to them.&lt;/p&gt;&#xA;&lt;p&gt;Thinking of &lt;em&gt;waiting resource held by another thread&lt;/em&gt; as a relationship in a directed graph. Whenever there is a cycle, there are chances&#xA;deadlock can happen.&lt;/p&gt;</description>
    </item>
    <item>
      <title>7. GUI applications</title>
      <link>http://localhost:1313/my_site/7.-gui-applications/</link>
      <pubDate>Wed, 23 Apr 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/my_site/7.-gui-applications/</guid>
      <description>&lt;h1 id=&#34;1-why-are-guis-single-threaded&#34;&gt;1. Why are GUIs single-threaded?&lt;/h1&gt;&#xA;&lt;p&gt;There have been many attempts to write multithreaded GUI frameworks, but because of the persistent problems&#xA;with race conditions and deadlock, almost all GUI frameworks transition to use single-threaded approach. For example,&#xA;AWT originally tried to support greater degree of multithreaded access, and the decision to make Swing single-threaded was based largely on experience with  AWT&lt;/p&gt;&#xA;&lt;p&gt;Concurrency hazards often occur in GUI framework, because the program often deals with many events that modify&#xA;different states of components. These components can depend on each other, making it easy to encounter deadlock.&lt;/p&gt;</description>
    </item>
    <item>
      <title>6. Thread pools</title>
      <link>http://localhost:1313/my_site/6.-thread-pools/</link>
      <pubDate>Fri, 11 Apr 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/my_site/6.-thread-pools/</guid>
      <description>&lt;h1 id=&#34;1-implicit-couplings-between-tasks-and-execution-policies&#34;&gt;1. Implicit couplings between tasks and execution policies.&lt;/h1&gt;&#xA;&lt;p&gt;While the &lt;code&gt;Executors&lt;/code&gt; offers the substantial flexibility in specifying and modifying execution policies. Not all tasks are compatible&#xA;with all execution policies, these tasks include:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Dependent tasks: Tasks that depend on the timing, results, or side effects of other tasks. When you submit such tasks, you implicitly&#xA;create constraints on the execution policy that must be carefully managed to avoid thread starvation problem where the thread may wait&#xA;a condition that never is fulfilled. (more on this is discussed in 1.1).&lt;/li&gt;&#xA;&lt;li&gt;Tasks that exploit thread confinement: Tasks use thread confinement technique may suit with single-threaded executor rather than&#xA;multithreaded one.&lt;/li&gt;&#xA;&lt;li&gt;Response-time sensitive tasks: It is troublesome for letting user wait the response after clicking button. Putting such tasks into&#xA;executor with full of long-running tasks often are not suitable.&lt;/li&gt;&#xA;&lt;li&gt;Tasks that use &lt;code&gt;ThreadLocal&lt;/code&gt;: states in &lt;code&gt;ThreadLocal&lt;/code&gt; can be shared between thread. If you want to submit that task in the executor,&#xA;you must ensure the thread has the life span longer the given tasks. Be aware because most executors may interrupt a current thread and&#xA;use another thread to serve your task.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;These reasons explain that thread pools work best when tasks are homogeneous and independent.&lt;/p&gt;</description>
    </item>
    <item>
      <title>5. Cancellation and shutdown</title>
      <link>http://localhost:1313/my_site/5.-cancellation-and-shutdown/</link>
      <pubDate>Mon, 07 Apr 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/my_site/5.-cancellation-and-shutdown/</guid>
      <description>&lt;h1 id=&#34;1-task-cancellation&#34;&gt;1. Task cancellation&lt;/h1&gt;&#xA;&lt;p&gt;An activity is cancellable if external code can move it to completion before its normal completion. There are several reasons you want&#xA;to cancel an activity:&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;User clicked on the &lt;code&gt;cancel&lt;/code&gt; button in a GUI app.&lt;/li&gt;&#xA;&lt;li&gt;Search a problem space for a finite amount of time and choose the best solution.&lt;/li&gt;&#xA;&lt;li&gt;App events: Decompose a problem into multiple tasks, once a task finds the solution, other tasks are interrupted.&lt;/li&gt;&#xA;&lt;li&gt;&amp;hellip;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;There is no safe way to preemptively stop a thread in Java, and therefore no safe way to preemptively stop a task. There are only cooperative&#xA;mechanisms, in which the task requested to be interrupted must agree do so.&lt;/p&gt;</description>
    </item>
    <item>
      <title>4. Task execution</title>
      <link>http://localhost:1313/my_site/4.-task-execution/</link>
      <pubDate>Mon, 17 Feb 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/my_site/4.-task-execution/</guid>
      <description>&lt;h1 id=&#34;1-executing-tasks-in-threads&#34;&gt;1. Executing tasks in threads&lt;/h1&gt;&#xA;&lt;p&gt;We need to identify boundary for each task to foster task independence, which is coupled with task execution policy can exhibit:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Better concurrency as independent tasks can be executed in parallel if there are adequate processing resources.&lt;/li&gt;&#xA;&lt;li&gt;Good throughput and responsiveness.&lt;/li&gt;&#xA;&lt;li&gt;Graceful degradation.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;For example, oftentimes, we see server application choose to separate each client request as a task boundary. This helps a task not being&#xA;affected by other tasks. Also, one message is easy to digest and require a very small percentage of server&amp;rsquo;s total capacity.&lt;/p&gt;</description>
    </item>
    <item>
      <title>3. Building blocks</title>
      <link>http://localhost:1313/my_site/3.-building-blocks/</link>
      <pubDate>Sun, 02 Feb 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/my_site/3.-building-blocks/</guid>
      <description>&lt;p&gt;The Java platform libraries include a rich set of concurrent building blocks&#xA;, like:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Thread-safe collections&lt;/li&gt;&#xA;&lt;li&gt;Variety of synchronizers, being able to coordinate the control flow&#xA;of cooperating threads.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;This chapter will get you covered about those concurrent building blocks.&lt;/p&gt;&#xA;&lt;h1 id=&#34;1-synchronized-collections&#34;&gt;1. Synchronized collections.&lt;/h1&gt;&#xA;&lt;p&gt;Java libraries support synchronized collection classes such as&#xA;&lt;code&gt;Vector&lt;/code&gt; and &lt;code&gt;Hashtable&lt;/code&gt;, part of the original JDK,&#xA;as well as their cousins added in JDK 1.2,&#xA;the synchronized wrapper classes created by the &lt;code&gt;Collections.synchronizedXxx&lt;/code&gt;&#xA;factory methods.&lt;/p&gt;</description>
    </item>
    <item>
      <title>1. Sharing Objects</title>
      <link>http://localhost:1313/my_site/1.-sharing-objects/</link>
      <pubDate>Wed, 15 Jan 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/my_site/1.-sharing-objects/</guid>
      <description>&lt;h1 id=&#34;1-publication-and-escape&#34;&gt;1. Publication and escape&lt;/h1&gt;&#xA;&lt;p&gt;Making an object available to code outside its concurrent scope is call publishing. There are multiple ways&#xA;to publish an object in a class:&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;Return its reference from a non-private method.&lt;/li&gt;&#xA;&lt;li&gt;Passing its reference to a method in another class.&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;An object that is published when it shouldn&amp;rsquo;t have been is said to have escaped. Following are some examples&lt;/p&gt;&#xA;&lt;h4 id=&#34;publish-an-object-through-static-fields&#34;&gt;Publish an object through static fields.&lt;/h4&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; Set&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Secret&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; knownSecrets;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;initialize&lt;/span&gt;() {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    knownSecrets &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; HashSet&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Secret&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;publish-through-return-statement&#34;&gt;Publish through return statement&lt;/h4&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;UnsafeStates&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; String&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; states &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; String&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;AK&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;AL&amp;#34;&lt;/span&gt; ...&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    };&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; String&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;getStates&lt;/span&gt;() { &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; states; }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;An object being published might further publish other objects which are its non-private fields.&lt;/p&gt;</description>
    </item>
    <item>
      <title>2. Composing objects</title>
      <link>http://localhost:1313/my_site/2.-composing-objects/</link>
      <pubDate>Wed, 15 Jan 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/my_site/2.-composing-objects/</guid>
      <description>&lt;p&gt;We don&amp;rsquo;t want to have to analyze each memory access to ensure that our program is thread‐safe; we want to be able to&#xA;take thread‐safe components and safely compose them into larger components or programs.&lt;/p&gt;&#xA;&lt;p&gt;This chapter covers patterns for structuring classes that can make it easier to make them thread‐safe and to&#xA;maintain them without accidentally undermining their safety guarantees.&lt;/p&gt;&#xA;&lt;h1 id=&#34;1-designing-a-thread-safe-class&#34;&gt;1. Designing a thread-safe class&lt;/h1&gt;&#xA;&lt;h2 id=&#34;11-gathering-synchronization-requirements&#34;&gt;1.1. Gathering Synchronization Requirements&lt;/h2&gt;&#xA;&lt;p&gt;&lt;em&gt;Invariants&lt;/em&gt; are defined as constraints that make a certain state of the object invalid or valid. For example, &lt;code&gt;NumberRange&lt;/code&gt; instance&#xA;has two states upper and lower ranges, the lower-range value must always is lower than the upper one.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
