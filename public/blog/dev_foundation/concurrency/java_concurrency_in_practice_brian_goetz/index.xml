<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Java Concurrency in Practice on Hugo ʕ•ᴥ•ʔ Bear Blog</title>
    <link>http://localhost:1313/blog/dev_foundation/concurrency/java_concurrency_in_practice_brian_goetz/</link>
    <description>Recent content in Java Concurrency in Practice on Hugo ʕ•ᴥ•ʔ Bear Blog</description>
    <generator>Hugo</generator>
    <language>en-US</language>
    <copyright>Copyright © 2020, Jane Doe.</copyright>
    <lastBuildDate>Sun, 02 Feb 2025 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/blog/dev_foundation/concurrency/java_concurrency_in_practice_brian_goetz/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>3. Building blocks</title>
      <link>http://localhost:1313/3.-building-blocks/</link>
      <pubDate>Sun, 02 Feb 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/3.-building-blocks/</guid>
      <description>&lt;p&gt;The Java platform libraries include a rich set of concurrent building blocks&#xA;, like:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Thread-safe collections&lt;/li&gt;&#xA;&lt;li&gt;Variety of synchronizers, being able to coordinate the control flow&#xA;of cooperating threads.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;This chapter will get you covered about those concurrent building blocks.&lt;/p&gt;&#xA;&lt;h1 id=&#34;1-synchronized-collections&#34;&gt;1. Synchronized collections.&lt;/h1&gt;&#xA;&lt;p&gt;Java libraries support synchronized collection classes such as&#xA;&lt;code&gt;Vector&lt;/code&gt; and &lt;code&gt;Hashtable&lt;/code&gt;, part of the original JDK,&#xA;as well as their cousins added in JDK 1.2,&#xA;the synchronized wrapper classes created by the &lt;code&gt;Collections.synchronizedXxx&lt;/code&gt;&#xA;factory methods.&lt;/p&gt;</description>
    </item>
    <item>
      <title>1. Sharing Objects</title>
      <link>http://localhost:1313/1.-sharing-objects/</link>
      <pubDate>Wed, 15 Jan 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/1.-sharing-objects/</guid>
      <description>&lt;h1 id=&#34;1-publication-and-escape&#34;&gt;1. Publication and escape&lt;/h1&gt;&#xA;&lt;p&gt;Making an object available to code outside its concurrent scope is call publishing. There are multiple ways&#xA;to publish an object in a class:&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;Return its reference from a non-private method.&lt;/li&gt;&#xA;&lt;li&gt;Passing its reference to a method in another class.&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;An object that is published when it shouldn&amp;rsquo;t have been is said to have escaped. Following are some examples&lt;/p&gt;&#xA;&lt;h4 id=&#34;publish-an-object-through-static-fields&#34;&gt;Publish an object through static fields.&lt;/h4&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; Set&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Secret&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; knownSecrets;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;initialize&lt;/span&gt;() {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    knownSecrets &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; HashSet&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Secret&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;publish-through-return-statement&#34;&gt;Publish through return statement&lt;/h4&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;UnsafeStates&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; String&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; states &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; String&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;AK&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;AL&amp;#34;&lt;/span&gt; ...&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    };&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; String&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;getStates&lt;/span&gt;() { &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; states; }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;An object being published might further publish other objects which are its non-private fields.&lt;/p&gt;</description>
    </item>
    <item>
      <title>2. Composing objects</title>
      <link>http://localhost:1313/2.-composing-objects/</link>
      <pubDate>Wed, 15 Jan 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/2.-composing-objects/</guid>
      <description>&lt;p&gt;We don&amp;rsquo;t want to have to analyze each memory access to ensure that our program is thread‐safe; we want to be able to&#xA;take thread‐safe components and safely compose them into larger components or programs.&lt;/p&gt;&#xA;&lt;p&gt;This chapter covers patterns for structuring classes that can make it easier to make them thread‐safe and to&#xA;maintain them without accidentally undermining their safety guarantees.&lt;/p&gt;&#xA;&lt;h1 id=&#34;1-designing-a-thread-safe-class&#34;&gt;1. Designing a thread-safe class&lt;/h1&gt;&#xA;&lt;h2 id=&#34;11-gathering-synchronization-requirements&#34;&gt;1.1. Gathering Synchronization Requirements&lt;/h2&gt;&#xA;&lt;p&gt;&lt;em&gt;Invariants&lt;/em&gt; are defined as constraints that make a certain state of the object invalid or valid. For example, &lt;code&gt;NumberRange&lt;/code&gt; instance&#xA;has two states upper and lower ranges, the lower-range value must always is lower than the upper one.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
