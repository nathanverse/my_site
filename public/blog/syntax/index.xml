<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Syntax on Hugo ʕ•ᴥ•ʔ Bear Blog</title>
    <link>http://localhost:1313/blog/syntax/</link>
    <description>Recent content in Syntax on Hugo ʕ•ᴥ•ʔ Bear Blog</description>
    <generator>Hugo</generator>
    <language>en-US</language>
    <copyright>Copyright © 2020, Jane Doe.</copyright>
    <lastBuildDate>Fri, 11 Apr 2025 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/blog/syntax/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>8. Thread pools</title>
      <link>http://localhost:1313/8.-thread-pools/</link>
      <pubDate>Fri, 11 Apr 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/8.-thread-pools/</guid>
      <description>&lt;h1 id=&#34;1-implicit-couplings-between-tasks-and-execution-policies&#34;&gt;1. Implicit couplings between tasks and execution policies.&lt;/h1&gt;&#xA;&lt;p&gt;While the &lt;code&gt;Executors&lt;/code&gt; offers the substantial flexibility in specifying and modifying execution policies. Not all tasks are compatible&#xA;with all execution policies, these tasks include:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Dependent tasks: Tasks that depend on the timing, results, or side effects of other tasks. When you submit such tasks, you implicitly&#xA;create constraints on the execution policy that must be carefully managed to avoid thread starvation problem where the thread may wait&#xA;a condition that never is fulfilled. (more on this is discussed in 1.1).&lt;/li&gt;&#xA;&lt;li&gt;Tasks that exploit thread confinement: Tasks use thread confinement technique may suit with single-threaded executor rather than&#xA;multithreaded one.&lt;/li&gt;&#xA;&lt;li&gt;Response-time sensitive tasks: It is troublesome for letting user wait the response after clicking button. Putting such tasks into&#xA;executor with full of long-running tasks often are not suitable.&lt;/li&gt;&#xA;&lt;li&gt;Tasks that use &lt;code&gt;ThreadLocal&lt;/code&gt;: states in &lt;code&gt;ThreadLocal&lt;/code&gt; can be shared between thread. If you want to submit that task in the executor,&#xA;you must ensure the thread has the life span longer the given tasks. Be aware because most executors may interrupt a current thread and&#xA;use another thread to serve your task.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;These reasons explain that thread pools work best when tasks are homogeneous and independent.&lt;/p&gt;</description>
    </item>
    <item>
      <title>5. Consistent hashing</title>
      <link>http://localhost:1313/5.-consistent-hashing/</link>
      <pubDate>Thu, 10 Apr 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/5.-consistent-hashing/</guid>
      <description>&lt;p&gt;To achieve horizontal scaling, it is important to distribute requests/data efficiently and evenly across servers.&#xA;Consistent hashing is a commonly used technique to achieve this goal.&lt;/p&gt;&#xA;&lt;h2 id=&#34;1-the-rehashing-problem&#34;&gt;1. The rehashing problem&lt;/h2&gt;&#xA;&lt;p&gt;Using modular hashing function to distribute requests to multiple nodes has an issue that, when you scale servers up or down,&#xA;you need to move significant amount of data to match with the current hash function, if the node that is affected is storing such huge data.&lt;/p&gt;</description>
    </item>
    <item>
      <title>5. Cancellation and shutdown</title>
      <link>http://localhost:1313/5.-cancellation-and-shutdown/</link>
      <pubDate>Mon, 07 Apr 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/5.-cancellation-and-shutdown/</guid>
      <description>&lt;h1 id=&#34;1-task-cancellation&#34;&gt;1. Task cancellation&lt;/h1&gt;&#xA;&lt;p&gt;An activity is cancellable if external code can move it to completion before its normal completion. There are several reasons you want&#xA;to cancel an activity:&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;User clicked on the &lt;code&gt;cancel&lt;/code&gt; button in a GUI app.&lt;/li&gt;&#xA;&lt;li&gt;Search a problem space for a finite amount of time and choose the best solution.&lt;/li&gt;&#xA;&lt;li&gt;App events: Decompose a problem into multiple tasks, once a task finds the solution, other tasks are interrupted.&lt;/li&gt;&#xA;&lt;li&gt;&amp;hellip;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;There is no safe way to preemptively stop a thread in Java, and therefore no safe way to preemptively stop a task. There are only cooperative&#xA;mechanisms, in which the task requested to be interrupted must agree do so.&lt;/p&gt;</description>
    </item>
    <item>
      <title>1. Introduction to system scaling</title>
      <link>http://localhost:1313/1.-introduction-to-system-scaling/</link>
      <pubDate>Fri, 28 Mar 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/1.-introduction-to-system-scaling/</guid>
      <description>&lt;h1 id=&#34;chapter-1-scale-from-zero-to-millions-of-users&#34;&gt;Chapter 1: Scale from zero to millions of users&lt;/h1&gt;&#xA;&lt;h2 id=&#34;i-database-replication&#34;&gt;I. Database replication&lt;/h2&gt;&#xA;&lt;p&gt;Master-slave model offers several benefits&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;Better performance: Parallel processing by multiple read nodes.&lt;/li&gt;&#xA;&lt;li&gt;Reliability: Data replication all over nodes.&lt;/li&gt;&#xA;&lt;li&gt;High availability:  if a database is offline as you can access data stored in another database server.&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;In this model, when a master goes offline, a slave node will be selected and promoted to a new master.&#xA;In real life, this process can be challenging because the slave node might not have the up-to-date data.&#xA;Please refer to following materials if you want to understand techniques to solve this problem, which may be complex, &lt;a href=&#34;https://en.wikipedia.org/wiki/Multi-master_replication&#34;&gt;1&lt;/a&gt;,&#xA;&lt;a href=&#34;https://dev.mysql.com/doc/refman/5.7/en/mysql-cluster-replication-multi-master.html&#34;&gt;2&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>2. Back of the envelope estimation</title>
      <link>http://localhost:1313/2.-back-of-the-envelope-estimation/</link>
      <pubDate>Fri, 28 Mar 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/2.-back-of-the-envelope-estimation/</guid>
      <description>&lt;p&gt;Three basic concepts should be well understood to give the estimation of&#xA;your system capacity:&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;Power of two: Allow you to quickly calculate I/O and memory size, such as KB, MB, GB, TB,&amp;hellip;&lt;/li&gt;&#xA;&lt;li&gt;Latency numbers every programmer should know: This allows you to compare the latency between&#xA;systems.&lt;/li&gt;&#xA;&lt;li&gt;Availability numbers: How much downtime per day you guarantee with your customer in SLA (service level agreement)?&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;Commonly asked back-of-the-envelope estimations: QPS, peak QPS, storage, cache, number of servers, etc.&#xA;You can practice these calculations when preparing for an interview. Practice makes perfect.&lt;/p&gt;</description>
    </item>
    <item>
      <title>3. A framework for system design interviews</title>
      <link>http://localhost:1313/3.-a-framework-for-system-design-interviews/</link>
      <pubDate>Fri, 28 Mar 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/3.-a-framework-for-system-design-interviews/</guid>
      <description>&lt;h1 id=&#34;the-interview-framework&#34;&gt;The interview framework&lt;/h1&gt;&#xA;&lt;p&gt;This chapter gives insights about what you should do during the system design interview.&#xA;Four basic steps are:&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;Step 1 - Understand the problem and establish design scope: This is when you ask the interviewer questions about&#xA;the constraints of the system, or making assumption if needed. The goal is to understand the load of the system and the timeline&#xA;to shift the feature. Ask:&#xA;&lt;ul&gt;&#xA;&lt;li&gt;What specific features are we going to build?&lt;/li&gt;&#xA;&lt;li&gt;How many users does the product have?&lt;/li&gt;&#xA;&lt;li&gt;How fast does the company anticipate to scale up? What are the anticipated scales in 3 months, 6 months, and a year?&lt;/li&gt;&#xA;&lt;li&gt;What is the company’s technology stack? What existing services you might leverage to simplify the design?&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;Step 2 -  Propose high-level design and get buy-in: develop a high-level design and reach an agreement with the interviewer on the design.&#xA;Treat your interviewer as a teammate and work together during the process. Do back-of-the-envelope calculations (if necessary) and go through a few concrete use&#xA;cases to illustrate your design.&lt;/li&gt;&#xA;&lt;li&gt;Step 3 - Design deep dive: At this step, you and the interviewers should have already sketched out a high-level blueprint for the overall design, now&#xA;you shall work with the interviewer to identify and prioritize components in the architecture. Each interviewer may concern a different aspect, such as, bottleneck,&#xA;digging deeper in a specific component,&amp;hellip;&lt;/li&gt;&#xA;&lt;li&gt;Step 4 - Wrap up: You may be asked several follow-up questions before the interview ends, which may be:&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Identify the system bottlenecks and discuss potential improvements.&lt;/li&gt;&#xA;&lt;li&gt;Recap the design (it is also helpful if you could actively to do this after a long session).&lt;/li&gt;&#xA;&lt;li&gt;Error cases (sever failure, network loss).&lt;/li&gt;&#xA;&lt;li&gt;Operation issues, such as how to monitor error logs, metrics, or roll out the system.&lt;/li&gt;&#xA;&lt;li&gt;How to handle the next scale curve, like 10 mil users.&lt;/li&gt;&#xA;&lt;li&gt;Propose other refinements you need if you had more time.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h1 id=&#34;time-allocation&#34;&gt;Time allocation&lt;/h1&gt;&#xA;&lt;p&gt;Time allocation is essential to not get yourself rambling on and on. Following is a raw estimation, the actual one&#xA;may depend on requirements and scopes.&lt;/p&gt;</description>
    </item>
    <item>
      <title>4. Design rate limiter</title>
      <link>http://localhost:1313/4.-design-rate-limiter/</link>
      <pubDate>Fri, 28 Mar 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/4.-design-rate-limiter/</guid>
      <description>&lt;p&gt;Benefits of rate limiter:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Prevent DDOS attack.&lt;/li&gt;&#xA;&lt;li&gt;Reduce cost: fewer servers, allocating resources for higher priority APIs,&#xA;fewer calls to third-party services which charge you per API call.&lt;/li&gt;&#xA;&lt;li&gt;Prevent servers from being overloaded: multiple requests may be from another crawling service, or&#xA;users&amp;rsquo; misbehavior.&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>5. Design a key-value store</title>
      <link>http://localhost:1313/5.-design-a-key-value-store/</link>
      <pubDate>Fri, 28 Mar 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/5.-design-a-key-value-store/</guid>
      <description>&lt;p&gt;A key-value store is a non-relational database. Each unique identifier is stored as a key with its associated value.&lt;/p&gt;&#xA;&lt;p&gt;The key must be unique, either is a plaint text or hashed value. For performance reasons, a short key works better.&lt;/p&gt;&#xA;&lt;p&gt;The value can be any types. It is treated as opaque object in key-value stores.&lt;/p&gt;&#xA;&lt;p&gt;In this article, we will try to design:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;The size of a key-value pair is small: less than 10 KB.&lt;/li&gt;&#xA;&lt;li&gt;Ability to store big data.&lt;/li&gt;&#xA;&lt;li&gt;High availability: The system responds quickly, even during failures.&lt;/li&gt;&#xA;&lt;li&gt;High scalability: The system can be scaled to support large data set.&lt;/li&gt;&#xA;&lt;li&gt;Automatic scaling: The addition/deletion of servers should be automatic based on traffic.&lt;/li&gt;&#xA;&lt;li&gt;Tunable consistency.&lt;/li&gt;&#xA;&lt;li&gt;Low latency.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h1 id=&#34;single-server-key-value-store&#34;&gt;Single server key-value store&lt;/h1&gt;&#xA;&lt;p&gt;Designing the database which is hosted on one server is easy, but it is very quick to run out of memory. Possible solutions:&lt;/p&gt;</description>
    </item>
    <item>
      <title>4. Task execution</title>
      <link>http://localhost:1313/4.-task-execution/</link>
      <pubDate>Mon, 17 Feb 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/4.-task-execution/</guid>
      <description>&lt;h1 id=&#34;1-executing-tasks-in-threads&#34;&gt;1. Executing tasks in threads&lt;/h1&gt;&#xA;&lt;p&gt;We need to identify boundary for each task to foster task independence, which is coupled with task execution policy can exhibit:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Better concurrency as independent tasks can be executed in parallel if there are adequate processing resources.&lt;/li&gt;&#xA;&lt;li&gt;Good throughput and responsiveness.&lt;/li&gt;&#xA;&lt;li&gt;Graceful degradation.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;For example, oftentimes, we see server application choose to separate each client request as a task boundary. This helps a task not being&#xA;affected by other tasks. Also, one message is easy to digest and require a very small percentage of server&amp;rsquo;s total capacity.&lt;/p&gt;</description>
    </item>
    <item>
      <title>3. Building blocks</title>
      <link>http://localhost:1313/3.-building-blocks/</link>
      <pubDate>Sun, 02 Feb 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/3.-building-blocks/</guid>
      <description>&lt;p&gt;The Java platform libraries include a rich set of concurrent building blocks&#xA;, like:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Thread-safe collections&lt;/li&gt;&#xA;&lt;li&gt;Variety of synchronizers, being able to coordinate the control flow&#xA;of cooperating threads.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;This chapter will get you covered about those concurrent building blocks.&lt;/p&gt;&#xA;&lt;h1 id=&#34;1-synchronized-collections&#34;&gt;1. Synchronized collections.&lt;/h1&gt;&#xA;&lt;p&gt;Java libraries support synchronized collection classes such as&#xA;&lt;code&gt;Vector&lt;/code&gt; and &lt;code&gt;Hashtable&lt;/code&gt;, part of the original JDK,&#xA;as well as their cousins added in JDK 1.2,&#xA;the synchronized wrapper classes created by the &lt;code&gt;Collections.synchronizedXxx&lt;/code&gt;&#xA;factory methods.&lt;/p&gt;</description>
    </item>
    <item>
      <title>1. Sharing Objects</title>
      <link>http://localhost:1313/1.-sharing-objects/</link>
      <pubDate>Wed, 15 Jan 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/1.-sharing-objects/</guid>
      <description>&lt;h1 id=&#34;1-publication-and-escape&#34;&gt;1. Publication and escape&lt;/h1&gt;&#xA;&lt;p&gt;Making an object available to code outside its concurrent scope is call publishing. There are multiple ways&#xA;to publish an object in a class:&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;Return its reference from a non-private method.&lt;/li&gt;&#xA;&lt;li&gt;Passing its reference to a method in another class.&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;An object that is published when it shouldn&amp;rsquo;t have been is said to have escaped. Following are some examples&lt;/p&gt;&#xA;&lt;h4 id=&#34;publish-an-object-through-static-fields&#34;&gt;Publish an object through static fields.&lt;/h4&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; Set&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Secret&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; knownSecrets;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;initialize&lt;/span&gt;() {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    knownSecrets &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; HashSet&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Secret&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;publish-through-return-statement&#34;&gt;Publish through return statement&lt;/h4&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;UnsafeStates&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; String&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; states &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; String&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;AK&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;AL&amp;#34;&lt;/span&gt; ...&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    };&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; String&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;getStates&lt;/span&gt;() { &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; states; }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;An object being published might further publish other objects which are its non-private fields.&lt;/p&gt;</description>
    </item>
    <item>
      <title>2. Composing objects</title>
      <link>http://localhost:1313/2.-composing-objects/</link>
      <pubDate>Wed, 15 Jan 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/2.-composing-objects/</guid>
      <description>&lt;p&gt;We don&amp;rsquo;t want to have to analyze each memory access to ensure that our program is thread‐safe; we want to be able to&#xA;take thread‐safe components and safely compose them into larger components or programs.&lt;/p&gt;&#xA;&lt;p&gt;This chapter covers patterns for structuring classes that can make it easier to make them thread‐safe and to&#xA;maintain them without accidentally undermining their safety guarantees.&lt;/p&gt;&#xA;&lt;h1 id=&#34;1-designing-a-thread-safe-class&#34;&gt;1. Designing a thread-safe class&lt;/h1&gt;&#xA;&lt;h2 id=&#34;11-gathering-synchronization-requirements&#34;&gt;1.1. Gathering Synchronization Requirements&lt;/h2&gt;&#xA;&lt;p&gt;&lt;em&gt;Invariants&lt;/em&gt; are defined as constraints that make a certain state of the object invalid or valid. For example, &lt;code&gt;NumberRange&lt;/code&gt; instance&#xA;has two states upper and lower ranges, the lower-range value must always is lower than the upper one.&lt;/p&gt;</description>
    </item>
    <item>
      <title>6. Visibility</title>
      <link>http://localhost:1313/6.-visibility/</link>
      <pubDate>Sun, 12 Jan 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/6.-visibility/</guid>
      <description>&lt;h1 id=&#34;visibility&#34;&gt;Visibility&lt;/h1&gt;&#xA;&lt;p&gt;A field, or a variable accordingly to what called &lt;code&gt;memory model&lt;/code&gt; followed by &lt;code&gt;Java Programming&lt;/code&gt; might have a set of&#xA;values that can be returned, which might be counterintuitive to developers. For example, consider this code&lt;/p&gt;&#xA;&lt;h4 id=&#34;a-thread-which-modify-the-field&#34;&gt;A thread which modify the field&lt;/h4&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;updateCurrent&lt;/span&gt;() {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    currentValue &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;) Math.&lt;span style=&#34;color:#a6e22e&#34;&gt;random&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;ui-thread&#34;&gt;UI thread&lt;/h4&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;currentValue &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; 5;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (;;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    display.&lt;span style=&#34;color:#a6e22e&#34;&gt;showValue&lt;/span&gt;(currentValue);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Thread.&lt;span style=&#34;color:#a6e22e&#34;&gt;sleep&lt;/span&gt;(1000); &lt;span style=&#34;color:#75715e&#34;&gt;// wait 1 second&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In the above code, the write thread might add a lot of values that can be returned to the field &lt;code&gt;currentValue&lt;/code&gt;. In&#xA;this case, &lt;code&gt;memory model&lt;/code&gt; will choose to return the initial values because it didn&amp;rsquo;t detect any method of the&#xA;UI thread modify &lt;code&gt;currentValue&lt;/code&gt;, which results in values modified are not updated on the UI thread, meaning not&#xA;visible.&lt;/p&gt;</description>
    </item>
    <item>
      <title>7. Thread management</title>
      <link>http://localhost:1313/7.-thread-management/</link>
      <pubDate>Sun, 12 Jan 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/7.-thread-management/</guid>
      <description>&lt;h1 id=&#34;thread-management&#34;&gt;Thread management&lt;/h1&gt;&#xA;&lt;p&gt;It is useful to group several threads into a unit, and if necessary, do:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Interrupt all threads in a group at once.&lt;/li&gt;&#xA;&lt;li&gt;Placing a limit on the maximum priority of threads in a group.&lt;/li&gt;&#xA;&lt;li&gt;Only access to certain files.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;A thread group can be contained within another thread group, providing a hierarchy originating with system thread&#xA;group. A thread in a group can modify threads in that group, and threads in children groups. By modification, it&#xA;means invoking any method that could affect a thread&amp;rsquo;s behavior such as changing its priority, or interrupting it.&lt;/p&gt;</description>
    </item>
    <item>
      <title>8. Threads and Exceptions</title>
      <link>http://localhost:1313/8.-threads-and-exceptions/</link>
      <pubDate>Sun, 12 Jan 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/8.-threads-and-exceptions/</guid>
      <description>&lt;h1 id=&#34;threads-and-exceptions&#34;&gt;Threads and exceptions&lt;/h1&gt;&#xA;&lt;p&gt;A thread will be terminated if it meets an uncaught exception. The uncaught exception is usually the sign of a serious error, their&#xA;occurrence needs to be tracked in some way. To enable this, every thread can have associated with it an instance of &lt;code&gt;UncaughtExceptionHandler&lt;/code&gt;&#xA;which has a method:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;uncaughtException&lt;/span&gt;(Thread thr, Throwable exc);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;that can handle the exception, and the thread throws exception.&lt;/p&gt;&#xA;&lt;p&gt;When the thread meets an uncaught exception. Following will happen.&lt;/p&gt;</description>
    </item>
    <item>
      <title>9. ThreadLocal type</title>
      <link>http://localhost:1313/9.-threadlocal-type/</link>
      <pubDate>Sun, 12 Jan 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/9.-threadlocal-type/</guid>
      <description>&lt;p&gt;&lt;code&gt;ThreadLocal&lt;/code&gt; allows you to store a variable that would be unique on each thread, and hence, writing&#xA;or reading on that variable need not be synchronized.&lt;/p&gt;&#xA;&lt;p&gt;It comes with several dangers:&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;Methods across classes dependent on global states in &lt;code&gt;ThreadLocal&lt;/code&gt;.&lt;/li&gt;&#xA;&lt;li&gt;In case a thread is reused, such as that of a thread pool, the initial state of the thread might&#xA;not be clean, causing unexpected behaviours for the code.&lt;/li&gt;&#xA;&lt;/ol&gt;</description>
    </item>
    <item>
      <title>3. Thread scheduling</title>
      <link>http://localhost:1313/3.-thread-scheduling/</link>
      <pubDate>Wed, 08 Jan 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/3.-thread-scheduling/</guid>
      <description>&lt;p&gt;Threads perform tasks, which have priority itself. Therefore, threads usually have a priority number associated to it. A thread is inactive when:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;In call a block operation, &lt;code&gt;wait()&lt;/code&gt;, &lt;code&gt;sleep()&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;It is preempted, meaning the thread gives slot for another thread to run (a thread with higher priority, or because the current CPU cycles the current&#xA;thread allowed to use is exceeded)&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;&lt;strong&gt;⚠️ Warning:&lt;/strong&gt;&#xA;Use priority only to affect scheduling policy for efficiency. Do not rely on thread priority for algorithm correctness. Attempting to write&#xA;not thread-safe code by assuming the current thread can execute exclusively with higher priority, while there are other lower-prioritized threads&#xA;access to that code, would potentially fail.&lt;/p&gt;</description>
    </item>
    <item>
      <title>2. wait, notifyAll, notify</title>
      <link>http://localhost:1313/2.-wait-notifyall-notify/</link>
      <pubDate>Tue, 07 Jan 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/2.-wait-notifyall-notify/</guid>
      <description>&lt;h1 id=&#34;wait-notifyall-notify&#34;&gt;wait, notifyAll, notify&lt;/h1&gt;&#xA;&lt;p&gt;In some circumstances, you might want a thread to notify another thread to do its work when some condition occurs. Example can be, you&#xA;have a &lt;code&gt;Print&lt;/code&gt; class, where people can add &lt;code&gt;PrintJob&lt;/code&gt;. You would to model thread like&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;A thread to receive job.&lt;/li&gt;&#xA;&lt;li&gt;A thread to do the job.&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;This model is efficient, because clients could receive a return immediately, and wait until their jobs get done.&lt;/p&gt;</description>
    </item>
    <item>
      <title>4. Deadlock</title>
      <link>http://localhost:1313/4.-deadlock/</link>
      <pubDate>Tue, 07 Jan 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/4.-deadlock/</guid>
      <description>&lt;p&gt;Deadlock is a phenomenon where two threads attempt to acquire two different objects&amp;rsquo; locks which can never be released because the locks are being&#xA;acquired by the other thread. This is well-known concept, I just put a code where deadlocks can be occurred, if you can detect&#xA;the sequences the deadlock can occur, you already grasped this concept well. Supposed we create two object&#xA;&lt;code&gt;Friendly&lt;/code&gt;, assigned their partners, and call &lt;code&gt;hug&lt;/code&gt; of each object on each thread:&lt;/p&gt;</description>
    </item>
    <item>
      <title>5. Thread terminnation</title>
      <link>http://localhost:1313/5.-thread-terminnation/</link>
      <pubDate>Tue, 07 Jan 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/5.-thread-terminnation/</guid>
      <description>&lt;h1 id=&#34;terminate-threads&#34;&gt;Terminate threads&lt;/h1&gt;&#xA;&lt;p&gt;A thread terminates when:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;The run method returns normally.&lt;/li&gt;&#xA;&lt;li&gt;The run method completes abruptly.&lt;/li&gt;&#xA;&lt;li&gt;The application terminates.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;When a thread is terminated, all locks must be released, otherwise it would make other threads to wait forever.&lt;/p&gt;&#xA;&lt;p&gt;There is some case you would want a thread to take control the CPU for while, and then cancel it if you want.&#xA;For example, imagine a user &lt;code&gt;Cancel&lt;/code&gt; button is triggered while another thread is in a transaction,&#xA;making request to the database. You&amp;rsquo;d prefer the thread would be canceled after completely returning from the&#xA;transaction. In that case, following pattern is popular.&lt;/p&gt;</description>
    </item>
    <item>
      <title>My New Post</title>
      <link>http://localhost:1313/my-new-post/</link>
      <pubDate>Mon, 06 Jan 2025 20:35:59 +0700</pubDate>
      <guid>http://localhost:1313/my-new-post/</guid>
      <description>&lt;p&gt;This is a page about »My New Post«.&lt;/p&gt;</description>
    </item>
    <item>
      <title>1. Synchronization</title>
      <link>http://localhost:1313/1.-synchronization/</link>
      <pubDate>Mon, 06 Jan 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/1.-synchronization/</guid>
      <description>&lt;h1 id=&#34;java-synchronization&#34;&gt;Java Synchronization&lt;/h1&gt;&#xA;&lt;p&gt;In Java, concepts of synchronization are based on lock of objects.&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;Adding synchronized modifier before a method&lt;/strong&gt;: if the method is an instance method, the class instance&amp;rsquo;s lock is acquire,&#xA;if the method is static, the java class object&amp;rsquo;s of the class is acquired&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Using synchronized block&lt;/strong&gt;: Lock can be acquired on any object given&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;Basically, you should acquire lock on the object if its states are accessed and modified by different threads.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
